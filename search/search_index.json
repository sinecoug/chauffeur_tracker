{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Effortlessly manage your family's driving schedule!</p> <p>The Chauffeur Tracker service provides a cloud-hosted convenient service for managing a family's driving responsibilities and scheduling pick-ups and drop-offs.</p> <p>NOTE: Chauffeur Tracker is an imaginary, simulated web service. The API endpoints are intended to reflect true behavior in production. If you wish, you can set up your local development environment to run API calls and test the documentation.</p>"},{"location":"#overview","title":"Overview","text":"<ul> <li>At a glance overview \u2014 get oriented and assess the capabilities of the API.</li> <li>API deep dive \u2014 enrich your understanding of the API and how it works.  </li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":"<ul> <li>System requirements \u2014 set up your local development environment to use the API. You only have to do this one time per development system.</li> <li>Quickstart guide \u2014 make a simple first call to the API.</li> </ul>"},{"location":"#tutorials","title":"Tutorials","text":"<p>Explore how to do common tasks with the API.</p> <ul> <li>Enroll a driver in the service</li> <li>Create a new schedule for an enrolled driver</li> <li>Retrieve a driver's scheduled commitments</li> <li>Change the status of a driving appointment</li> <li>Retrieve a driver's cell phone number for emergency calls</li> </ul>"},{"location":"#api-reference","title":"API reference","text":"<p>Discover the endpoints for these resources.</p> <ul> <li><code>drivers</code> resource</li> <li><code>schedules</code> resource</li> <li>Supported endpoints</li> </ul>"},{"location":"#status-codes-and-errors","title":"Status codes and errors","text":"<ul> <li>Error handling information \u2014 get out of a bind if an error occurs.</li> </ul>"},{"location":"#support","title":"Support","text":"<p>If you have any questions or run into any issues while using the Chauffeur Tracker API, we're here to help!</p> <p>Contact us at https://www.chauffeurService.com/ or email support@chauffeurService.com.</p>"},{"location":"get-started/1-prereqs/","title":"Set up your development environment","text":"<p>You must do the following steps before you can run the tutorials for the Chauffeur Tracker service.</p> <p>Expect this preparation to take about 20 minutes to complete.</p>"},{"location":"get-started/1-prereqs/#install-prerequisite-tooling","title":"Install prerequisite tooling","text":"<p>The following instructions describe how to prepare for running the tutorials on Windows. You only have to do this one time per development system.</p> <p>For information about how to prepare MacOS for the tutorials, visit the MacOS installation guide.</p> <p>Install the following tools on your development system:</p> <ul> <li>A GitHub account</li> <li>A development system (PC, Mac, or Linux) running a current or long-term support (LTS version of the operating system).</li> <li>The following software on your development system:</li> <li>(Optional) Git (for the command line).</li> <li>GitHub Desktop.</li> <li>A fork of the chauffeur-tracker-service repo.</li> <li>A current/LTS version of node.js.</li> <li>A current version of json-server.</li> <li>A current copy of the database file. You can get this by syncing your fork.</li> <li>TIP: If you're using a fork of the repo, create a working branch in which to do your tutorials. Create a new branch for each tutorial to prevent a mistake in one from affecting your work in another.</li> <li>cURL comes installed by default on Mac operating systems. If you need to, install it from here.</li> <li>The Postman desktop app. Because you run the Chaffeur Tracker service on your development system with an <code>http://localhost</code> hostname, the web-version of Postman can't perform the exercises.</li> </ul>"},{"location":"get-started/1-prereqs/#test-your-development-system","title":"Test your development system","text":"<p>To test your development system, follow these steps:</p> <ol> <li> <p>Check your json-server version.</p> <pre><code>C:\\&gt;json-server --version\n</code></pre> </li> </ol> <p>The installed json-server version displays.</p> <pre><code>```shell\n1.0.0-alpha.23\n```\n</code></pre> <ol> <li> <p>Check your Node.js version.</p> <pre><code>C:\\&gt;node --version\nv20.13.0\n</code></pre> <p>The installed Node.js version displays.</p> <pre><code>v20.13.0\n</code></pre> </li> <li> <p>Create and check out a test branch of your fork of the chauffeur-tracker-service repo. Your <code>GitHub repo workspace</code> is the directory that contains your fork of the <code>chauffeur-tracker</code> repo.</p> <pre><code>    cd &lt;your GitHub repo workspace&gt;\n    # (see the chauffeur-tracker service directory in the list)\n    cd chauffeur-tracker-service\n    cd api\n    cd start-server.bat\n</code></pre> <p>If your development system is installed correctly, you should see the service start and display the URL of the service: <code>http://localhost:3000</code>.</p> <pre><code>     C:\\chauffeur_tracker\\api&gt;json-server -w chauffeur-tracker-db-source.json\n\n    --watch/-w can be omitted, JSON Server 1+ watches for file changes by default\n     JSON Server started on PORT :3000\n    Press CTRL-C to stop\n    Watching  chauffeur-tracker-db-source.json...\n\n    \u2661( \u25e1\u203f\u25e1 )\n\n    Index:\n    http://localhost:3000/\n\n    Static files:\n    Serving ./public directory if it exists\n\n    Endpoints:\n    http://localhost:3000/drivers\n    http://localhost:3000/schedules\n</code></pre> </li> <li> <p>Make a test call to the service.</p> <pre><code>    curl -u user:pass http://localhost:3000/drivers\n</code></pre> </li> <li> <p>If the service is running correctly, you should see a list of drivers from the service, such as in this example.</p> <pre><code>[\n    {\n        \"driverName\": \"Laura Jaxon\",\n        \"driverIdentity\": \"Mom\",\n        \"cellPhone\": \"(555)555-1234\",\n        \"email\": \"l.jaxon@gmail.com\",\n        \"id\": \"1\"\n    },\n    {\n        \"driverName\": \"Aiden Issac\",\n        \"driverIdentity\": \"Dad\",\n        \"cellPhone\": \"(555)555-7954\",\n        \"email\": \"a.issac@gmail.com\",\n        \"id\": \"2\"\n    },\n    ...\n</code></pre> </li> </ol> <p>If you don't see the list of drivers, or receive an error in any step of the procedure, investigate and correct the error before continuing. Some common situations that cause errors include:</p> <ul> <li>You mistyped a command.</li> <li>You aren't in the correct directory.</li> <li>A required software component didn't install correctly.</li> <li>A required software component isn't up to date.</li> </ul> <p>If you see the list of drivers from the service, you're ready to do the tutorials. For more information, go here.</p>"},{"location":"get-started/2-quickstart/","title":"Quickstart guide","text":"<p>Are you looking for a way to plan and track your family's transport needs?</p>"},{"location":"get-started/2-quickstart/#at-a-glance","title":"At a glance","text":"<p>This Quickstart provides all the information you need to begin using Chauffeur Tracker to track your family's driving schedules.</p> <p>You\u2019ll learn about hosting a secure web service and how to make your first call to the API.</p>"},{"location":"get-started/2-quickstart/#api-security","title":"API Security","text":"<p>At its heart, API security requires that the caller provides:</p> <ul> <li>an authenticated identity (the authentication), and</li> <li>evidence that the caller has permission to access the resources (the authorization).</li> </ul> <p>The Chauffeur Tracker service is an imaginary, simulated service. While it doesn't follow all the access and restriction rules, the service does implement HTTP Basic Auth, which is a classic lock-and-key security model that's simple and widely used. Basic Auth requires a username and password combination that's Base64 encoded and sent in the HTTP Authorization header of a request.</p> <p>In HTTP Basic Auth, the server-side application expects an Authorization header that contains a:</p> <pre><code>- username \n- password\n</code></pre> <p>If it doesn't receive it, it returns an HTTP 401 \"Unauthorized\" error. For more information, see Error handling information.</p>"},{"location":"get-started/2-quickstart/#base-url","title":"Base URL","text":"<p>The Chauffeur Tracker API is served over HTTPS. All URLs referenced in the documentation have the following base: https://{server_url}.</p> <p>The {server_url} variable depends on users' installation of the service in their development environment. For v1 of Chauffeur Tracker service, the {server_url} variable is typically set to http://localhost.</p> <p>Here's how to set your base URL variable in Postman.</p> <ol> <li>In the request pane in the Postman interface, click on the Params tab.</li> <li>Click on Add Param button.</li> <li>Choose URL from the dropdown menu.</li> <li>Enter a name for your variable,for example, <code>baseURL</code>.</li> <li>Enter the base URL for your API, for example, <code>http://localhost:3000</code>.</li> <li>Click Save.  </li> </ol> <p>Note that whenever you create a new request, you can use the <code>baseURL</code> variable as part of your URL.</p>"},{"location":"get-started/2-quickstart/#make-your-first-api-call-list-all-driving-schedules","title":"Make your first API call \u2013 List all driving schedules","text":"<p>For your first call to the API, assume that you\u2019re already enrolled in the Chauffeur Tracker service and you want to list all driving schedules.</p> <ul> <li>You've aleady set up your local system requirements to use the API.</li> <li>You\u2019ll use cURL to make the API call, and for Basic Auth, include the -u parameter to bypass the username and password and return the response without errors.</li> </ul> <p>Let\u2019s test making this simple request to the <code>schedules</code> resource.  </p> <p>Open another command-line window and submit the following request to retrieve a list of drivers' schedules.</p> <p>Sample request:</p> <pre><code>``` shell\ncurl -u user:pass http://localhost:3000/schedules\n```\n</code></pre> <p>Remember: To make a request to <code>http://localhost:3000/schedules</code>, you can simply use <code>{baseURL}/drivers</code> as your request URL.</p> <p>Sample response:</p> <pre><code>```js\n\n    {\n        \"driverId\": \"1\",\n        \"title\": \"School run\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"789 Oak St, Anytown\",\n        \"dropoffLocation\": \"321 Maple St, Anytown\",\n        \"pickupTime\": \"2024-06-16T09:00:00Z\",\n        \"dropoffTime\": \"2024-06-16T09:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"2\"\n    },\n    {\n        \"driverId\": \"2\",\n        \"title\": \"Baseball practice\",\n        \"passenger\": \"Richie\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"456 Elm St, Springfield\",\n        \"pickupTime\": \"2024-06-15T08:00:00Z\",\n        \"dropoffTime\": \"2024-06-15T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"1\"\n    },\n    {\n        \"driverId\": \"3\",\n        \"title\": \"Swimfest\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"110 Nassau St, Springfield\",\n        \"pickupTime\": \"2024-07-22T08:00:00Z\",\n        \"dropoffTime\": \"2024-07-22T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"3\"\n    },\n    {\n        \"driverId\": \"1\",\n        \"title\": \"Vet visit\",\n        \"passenger\": \"Minnie\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"12 Animal Drive, Springfield\",\n        \"pickupTime\": \"2024-08-08T08:00:00Z\",\n        \"dropoffTime\": \"2024-08-08T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"4\"\n    },\n    {\n        \"id\": \"e3a8\",\n        \"driverID\": \"00ad\",\n        \"title\": \"Johnny's Dental visit\",\n        \"passenger\": \"Johnny\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"The Quay, Docks, Springfield\",\n        \"pickupTime\": \"2024-06-16T11:00:00Z\",\n        \"dropoffTime\": \"2024-07-16T12:00:00Z\",\n        \"status\": \"Canceled\"\n    }\n\n```\n</code></pre>"},{"location":"get-started/2-quickstart/#next-steps","title":"Next steps","text":"<p>Now that you\u2019ve everything set up correctly, you\u2019re good to go and can take full advantage of the Chauffeur Tracker service API! Go ahead and start posting new driving schedules or enrolling new drivers. You\u2019ll see how easy the API is to use.</p> <p>If you need more guidance, the Tutorials section of the API documentation walks through any task you\u2019ll want to do. The finer details of the supported resources, endpoints and properties are in the API Reference section. For more information, go here.</p>"},{"location":"get-started/macos-installation/","title":"MacOS installation guide","text":"<p>These are the steps to install all of the prerequisites on MacOS.</p> <p>Expect this preparation to take about 30 minutes to complete.</p>"},{"location":"get-started/macos-installation/#what-were-installing","title":"What we're installing","text":"<p>We will be installing the following:</p> <ul> <li>Homebrew</li> <li>Git (for the command line)</li> <li>A current/LTS Version of <code>node.js</code></li> <li>a current version of json-server</li> </ul>"},{"location":"get-started/macos-installation/#installtion","title":"Installtion","text":"<ol> <li>Open Terminal.app</li> <li>Paste the following code into terminal and press Enter:</li> </ol> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> <p>3.Follow the guided process.</p> <p>4.Paste the following code into terminal and press Enter:</p> <pre><code>brew install git node json-server\n</code></pre> <p>5.Paste the following code into terminal and press Enter:</p> <pre><code>sudo npm install -g json-server\n</code></pre> <p>6.Type the following command, with your fork of the GitHub repository in the place of <code>{Repo}</code>.</p> <pre><code>git clone {Repo}\n</code></pre> <p>Congrats, you're now ready to start the test your system!.</p>"},{"location":"get-started/macos-installation/#optional-install","title":"Optional Install","text":""},{"location":"get-started/macos-installation/#postman","title":"Postman","text":"<p>Many of the tutorials reference and use Postman.</p> <p>The installation is guided. If you're not sure which chip your Mac has (Intel or Apple) you can click the Apple logo on the top left of your screen,  and then click <code>About This Mac</code> to confirm.</p>"},{"location":"overview/overview/","title":"About the Chauffeur Tracker service API","text":"<p>With the Chauffeur Tracker service, you can build a cloud solution that simplifies the chore of coordinating driving schedules for multiple family commitments!</p> <p></p>"},{"location":"overview/overview/#real-world-scenarios","title":"Real-world scenarios","text":"<p>Most of us know a Laura, a busy mum who's juggling kids' activities, her job, and household errands. She finds it hard to keep up with everyone's weekly schedules and remember who's going where and at what time. It's a huge coordination effort, right?</p> <p>The Chauffeur Tracker service helps the Laura's of this world to manage her family's driving needs for the week, including school drop-offs, sports practice, and grocery pickups. By using this web service, you'll save your customers valuable time and energy and empower them to:</p> <ul> <li>efficiently plan and track their family's transportation needs,</li> <li>seamlessly align their calendar with weekly driving schedules,</li> <li>arrange timely family pick-ups, and</li> <li>schedule drop-offs with ease.</li> </ul> <p>As a developer, you can apply own branding and integrate additional services to your app.</p>"},{"location":"overview/overview/#app-integrations","title":"App integrations","text":"<p>Consider the potential broader application of this web service, too.</p> <p>Elder care services, meals delivery...really, any organization that uses on-demand drivers to optimize pick-ups and drop-offs needs this service.</p>"},{"location":"overview/overview/#quickstart","title":"Quickstart","text":"<p>So whether you're a new or seasoned app Developer, or just interested to learn more, let's get you up and running with the Chauffeur Tracker service. See the Quickstart guide.</p>"},{"location":"overview/usage/","title":"API deep dive","text":"<p>The following key concepts reveal how the Chauffeur Tracker service works under the hood.</p>"},{"location":"overview/usage/#the-chauffeur-tracker-service","title":"The Chauffeur Tracker service","text":"<p>Driving schedules will surface in the Chauffeur Tracker service when they are created in the database and assigned to drivers (by driver {id}). If you\u2019ve used the Chauffeur Tracker service previously, you\u2019re already enrolled in the service and may have schedules to work with.</p> <p>If not, you might need to set up your development system and get going from scratch. Don\u2019t worry \u2013 you only have to do this one time per development system! Follow these prerequisite steps to install the tools and test your development system.</p>"},{"location":"overview/usage/#when-to-use-the-chauffeur-tracker-service","title":"When to use the Chauffeur Tracker service","text":"<p>The Chauffeur Tracker service REST API offers a wide range of integration possibilities, from enhancing a family's driving rota to creating customer-facing apps.</p> <p>The service comprises two resources: <code>drivers</code> and <code>schedules</code>. The <code>drivers</code> resource (containing the subscribed drivers to the service) works in synergy with the <code>schedules</code> resource (containing the schedules) to align drivers with their driving schedules.</p> <p>Using this cloud-based service, customers (drivers) can register themselves to create and manage their own driving schedules. When they're registered, customers can update and delete schedules to suit their needs. Adding schedules on customers' behalf is easy - if an organization is collaborating with drivers, for example, they might be delegated on-demand driving requests and assigned schedules from different sources.</p>"},{"location":"overview/usage/#how-to-use-the-chauffeur-tracker-service","title":"How to use the Chauffeur Tracker service","text":"<p>To build your API call, you must have the following components:</p> <ul> <li>A host.  The {server_url} depends on users' installation of the service in their development environment. For v1 of Chauffeur Tracker Service API, the server_url variable is typically set to <code>http://localhost</code>. For more information, see Base URL.</li> <li>Authentication.  For v1 of the Chauffeur Tracker service, all API requests use HTTP Basic Auth - a security checkpoint that requires transmission of a username and password (Base64 encoded) with every request. For more information, see API security.</li> <li>A request.  The Chauffeur Tracker service REST API enables CRUD operations via HTTP requests on database resources (<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>PATCH</code>, and <code>DELETE</code> methods). Request and response bodies are encoded as JSON.</li> </ul>"},{"location":"overview/usage/#supported-endpoints","title":"Supported endpoints","text":"HTTP Method Endpoint GET Retrieve all drivers GET Retrieve a specific driver by ID GET Retrieve a driver by property POST Create a driver object PUT Update a driver by ID PATCH Update a driver by property DELETE Delete a driver by ID GET Retrieve all driving schedules GET Retrieve a specific schedule by ID GET Retrieve a schedule by property POST Create a schedule PUT Update a schedule by ID PATCH Update a schedule by property DELETE Delete a schedule by ID"},{"location":"overview/usage/#related-information","title":"Related information","text":"<ul> <li>Quickstart guide</li> </ul>"},{"location":"reference/1-resources/drivers/","title":"<code>drivers</code> resource","text":"<p>Base endpoint:</p> <pre><code>{server_url}/drivers\n</code></pre> <p>Contains information about drivers who transport family members by car.</p>"},{"location":"reference/1-resources/drivers/#resource-properties","title":"Resource properties","text":"<p>Sample <code>drivers</code> resource</p> <pre><code>{\n    \"driverName\": \"Laura Jaxon\",\n    \"driverIdentity\": \"Mom\"\n    \"cellPhone\": \"(555)555-1234\"\n    \"email\": \"f.smith@gmail.com\"\n    \"id\": 1\n}\n</code></pre> Property Description Type Required Notes <code>driverName</code> The driver's full name. string Required <code>driverIdentity</code> The driver's primary role in relationship to the family. string Optional Examples: Mom, Dad, Neighbor. <code>cellPhone</code> The driver's cell phone number. string Required The standard US telephone number is a 10-digit number, such as (555) 555-1234, where the first three digits are the 'area code'. <code>email</code> The driver's email address. string Required A unique email is required. <code>id</code> The driver's unique record ID. number Required"},{"location":"reference/1-resources/drivers/#operations","title":"Operations","text":"<p>The <code>drivers</code> resource supports these operations.</p>"},{"location":"reference/1-resources/drivers/#retrieve-get","title":"RETRIEVE (GET)","text":"<ul> <li>Retrieve all drivers</li> <li>Retrieve a specific driver</li> <li>Retrieve a driver by property</li> </ul>"},{"location":"reference/1-resources/drivers/#create-post","title":"CREATE (POST)","text":"<ul> <li>Create a driver object</li> </ul>"},{"location":"reference/1-resources/drivers/#update-putpatch","title":"UPDATE (PUT/PATCH)","text":"<ul> <li>Update a specific driver</li> <li>Update a driver by property</li> </ul>"},{"location":"reference/1-resources/drivers/#delete","title":"DELETE","text":"<ul> <li>Delete a specific driver</li> </ul>"},{"location":"reference/1-resources/schedules/","title":"<code>schedules</code> resource","text":"<p>Base endpoint:</p> <pre><code>{server_url}/schedule\n</code></pre> <p>Contains a driver's schedule, which includes their pick-up and drop-off commitments.</p>"},{"location":"reference/1-resources/schedules/#resource-properties","title":"Resource properties","text":"<p>Sample <code>schedules</code> resource</p> <pre><code>{\n    \"driverId\": \"1\",\n    \"title\": \"Baseball practice\",\n    \"passenger\": \"Molly\",\n    \"pickupLocation\": \"123 Main St, Springfield\",\n    \"dropoffLocation\": \"456 Elm St, Springfield\",\n    \"pickupTime\": \"2024-06-15T08:00:00Z\",\n    \"dropoffTime\": \"2024-06-15T08:30:00Z\",\n     \"status\": \"Scheduled\",\n    \"id\": 1\n}\n</code></pre> Property Description Type Required Notes <code>driverId</code> The ID of the driver resource to which this schedule is assigned. number Required <code>title</code> The title or short description of the driving schedule. number Required Example: Vet visit, School run. <code>passenger</code> Who the driver is to transport. string Required <code>pickupLocation</code> Where the driver is to pick up a passenger. string Required <code>dropoffLocation</code> Where the driver is to drop off a passenger. string Required <code>pickupTime</code> When the driver is to pick up a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>dropoffTime</code> When the driver is to drop off a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>status</code> The status of the driving schedule. string Required Allowed status values are Scheduled, Canceled, Rescheduled. <code>id</code> The driving schedule's unique record ID. number Required"},{"location":"reference/1-resources/schedules/#operations","title":"Operations","text":"<p>The <code>schedules</code> resource supports these operations.</p>"},{"location":"reference/1-resources/schedules/#retrieve-get","title":"RETRIEVE (GET)","text":"<ul> <li>Retrieve all schedules</li> <li>Retrieve schedules for a specific driver</li> <li>Retrieve schedules by property</li> </ul>"},{"location":"reference/1-resources/schedules/#create-post","title":"CREATE (POST)","text":"<ul> <li>Create a schedule</li> </ul>"},{"location":"reference/1-resources/schedules/#update-putpatch","title":"UPDATE (PUT/PATCH)","text":"<ul> <li>Update a schedule for a specific driver</li> <li>Update a schedule by property</li> </ul>"},{"location":"reference/1-resources/schedules/#delete","title":"DELETE","text":"<ul> <li>Delete a schedule for a specific driver</li> </ul>"},{"location":"reference/2-operations/drivers-create-driver/","title":"Create a driver object","text":"<p>Creates a <code>drivers</code> object in the database. The request body contains the new driver's details. You must specify the required properties for the driver.</p>"},{"location":"reference/2-operations/drivers-create-driver/#url","title":"URL","text":"<pre><code>{server_url}/drivers/\n</code></pre>"},{"location":"reference/2-operations/drivers-create-driver/#method","title":"Method","text":"<p>{POST}</p>"},{"location":"reference/2-operations/drivers-create-driver/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section. Content-Type The format of the data to be posted. Optional application/json. Default value. Accept The format of the data to be returned. Optional application/json. Default value."},{"location":"reference/2-operations/drivers-create-driver/#request-body","title":"Request body","text":"<p>In the request body, specify a JSON representation of the <code>drivers</code> object. The following table lists the properties that are required when you create a driver object.</p> Property Description Type Required Notes <code>driverName</code> The driver's full name. string Required <code>driverIdentity</code> The driver's primary role in relationship to the family. string Optional Examples: Mom, Dad, Neighbor. <code>cellPhone</code> The driver's cell phone number. string Required The standard US telephone number is a 10-digit number, such as (555) 555-1234, where the first three digits are the 'area code'. <code>email</code> The driver's email address. string Required A unique email is required. <code>id</code> The driver's unique record ID. number Required The schedule id is auto-generated. See the return body."},{"location":"reference/2-operations/drivers-create-driver/#sample-request","title":"Sample request","text":"<p>The POST body should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>[\n    {\n        \"driverName\": \"SallyAnn Issac\",\n        \"driverIdentity\": \"Nana\",\n        \"cellPhone\": \"(555)555-9874\",\n        \"email\": \"s.issac@gmail.com\"\n    }\n``\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-create-driver/#return-body","title":"Return body","text":"<p>The following example shows the response. Note that the names should be the same as you used in your Request body and the response should include the new driver's id. The driver's id is automatically generated when the driver object is created.</p> <pre><code>[\n    {\n        \"id\": \"fd05\",\n        \"driverName\": \"SallyAnn Issac\",\n        \"driverIdentity\": \"Nana\",\n        \"cellPhone\": \"(555)555-9874\",\n        \"email\": \"s.issac@gmail.com\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-create-driver/#return-status","title":"Return status","text":"Status value Return status Description 201 Created Driving schedule created successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-create-driver/#related-information","title":"Related information","text":"<ul> <li>Tutorial: Enroll a new driver</li> <li>Security</li> </ul>"},{"location":"reference/2-operations/drivers-delete-driver-by-id/","title":"Delete a specific driver","text":"<p>Deletes a <code>drivers</code> object in the database.</p> <p>For example, you want to delete driverId=4 from the database.</p> <p>Assumption: to delete the correct driver, you must know the <code>driverId</code> to query.</p>"},{"location":"reference/2-operations/drivers-delete-driver-by-id/#url","title":"URL","text":"<pre><code>{server_url}/drivers/{id}\n</code></pre>"},{"location":"reference/2-operations/drivers-delete-driver-by-id/#method","title":"Method","text":"<p>{DELETE}</p>"},{"location":"reference/2-operations/drivers-delete-driver-by-id/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>driverID</code> The record ID of the driver to delete. number Required"},{"location":"reference/2-operations/drivers-delete-driver-by-id/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/drivers-delete-driver-by-id/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/drivers-delete-driver-by-id/#return-body","title":"Return body","text":"<p>The sample response returns a driver matching the specified <code>id</code>, and deletes the object in the database.</p> <pre><code>[\n    {\n        \"driverName\": \"SallyAnn Issac\",\n        \"driverIdentity\": \"Nana\",\n        \"cellPhone\": \"(555)555-9874\",\n        \"email\": \"s.issac@gmail.com\",\n        \"id\": \"fd05\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-delete-driver-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-delete-driver-by-id/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/drivers-get-all-drivers/","title":"Retrieve all drivers","text":"<p>Returns an array of <code>drivers</code> objects who are registered with the service.</p>"},{"location":"reference/2-operations/drivers-get-all-drivers/#url","title":"URL","text":"<pre><code>{server_url}/drivers/\n</code></pre>"},{"location":"reference/2-operations/drivers-get-all-drivers/#method","title":"Method","text":"<p>{GET}</p>"},{"location":"reference/2-operations/drivers-get-all-drivers/#query-parameters","title":"Query parameters","text":"<p>None</p>"},{"location":"reference/2-operations/drivers-get-all-drivers/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/drivers-get-all-drivers/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/drivers-get-all-drivers/#return-body","title":"Return body","text":"<pre><code>[\n    {\n        \"driverName\": \"Faith Jaxon\",\n        \"driverIdentity\": \"Mom\",\n        \"cellPhone\": \"(555)555-1234\",\n        \"email\": \"f.smith@gmail.com\",\n        \"id\": \"1\"\n    },\n    {\n        \"driverName\": \"Aiden Issac\",\n        \"driverIdentity\": \"Dad\",\n        \"cellPhone\": \"(555)555-7954\",\n        \"email\": \"a.issac@gmail.com\",\n        \"id\": \"2\"\n    },\n    {\n        \"driverName\": \"Melanie Griffiths\",\n        \"driverIdentity\": \"Neighbor\",\n        \"cellPhone\": \"(555)794-4321\",\n        \"email\": \"m.griffiths@gmail.com\",\n        \"id\": \"3\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-get-all-drivers/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-get-all-drivers/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/drivers-get-driver-by-id/","title":"Retrieve a specific driver","text":"<p>Returns an array of <code>drivers</code> objects for the specified <code>driverId</code>, if it exists.</p> <p>For example, you want to retrieve driverId=1 from the database.</p> <p>Assumption: to return the correct driver, you must know the <code>driverId</code> to query.</p>"},{"location":"reference/2-operations/drivers-get-driver-by-id/#url","title":"URL","text":"<pre><code>{server_url}/drivers/{id}\n</code></pre>"},{"location":"reference/2-operations/drivers-get-driver-by-id/#method","title":"Method","text":"<p>{GET}</p>"},{"location":"reference/2-operations/drivers-get-driver-by-id/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>driverId</code> The record ID of the driver to return. number Required <p>NOTE: To retrieve a driver by cell phone number or other property, further filter your drivers request.</p>"},{"location":"reference/2-operations/drivers-get-driver-by-id/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/drivers-get-driver-by-id/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/drivers-get-driver-by-id/#return-body","title":"Return body","text":"<pre><code>[\n   {\n    \"driverName\": \"Faith Jaxon\",\n    \"driverIdentity\": \"Mom\",\n    \"cellPhone\": \"(555)555-1234\",\n    \"email\": \"f.smith@gmail.com\",\n    \"id\": \"1\"\n   }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-get-driver-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-get-driver-by-id/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/drivers-get-driver-by-property/","title":"Retrieve a driver by property","text":"<p>Returns an array of <code>drivers</code> objects matching a specified property.</p> <p>For example, to return a driver by cell phone number, query the property <code>cellPhone</code> to filter responses.</p> <p>Assumption: to return the correct driver, you must know the property to query.</p>"},{"location":"reference/2-operations/drivers-get-driver-by-property/#url","title":"URL","text":"<pre><code>{server_url}/drivers/?{property}={value}\n</code></pre>"},{"location":"reference/2-operations/drivers-get-driver-by-property/#method","title":"Method","text":"<p>{GET}</p>"},{"location":"reference/2-operations/drivers-get-driver-by-property/#query-parameters","title":"Query parameters","text":"<p>Optionally, you can specify driver properties as<code>Key/Value</code> query parameters. For example: <code>driverIdentity/Neighbor</code>. Note that property titles are case sensitive.</p> Property Description Type Required Notes <code>driverName</code> The driver's full name. string Required <code>driverIdentity</code> The driver's primary role in relationship to the family. string Optional Examples: Mom, Dad, Neighbor. <code>cellPhone</code> The driver's cell phone number. string Required <code>email</code> The driver's email address. string Required A unique email is required."},{"location":"reference/2-operations/drivers-get-driver-by-property/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/drivers-get-driver-by-property/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/drivers-get-driver-by-property/#sample-request","title":"Sample request","text":"<p>The API call should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>{GET}{base_url}/drivers?driverIdentity=Neighbor\n</code></pre>"},{"location":"reference/2-operations/drivers-get-driver-by-property/#return-body","title":"Return body","text":"<p>The sample response returns a driver matching the specified <code>driverIdentity</code>.</p> <pre><code>[\n    {\n        \"driverName\": \"Melanie Griffiths\",\n        \"driverIdentity\": \"Neighbor\",\n        \"cellPhone\": \"(555)794-4321\",\n        \"email\": \"m.griffiths@gmail.com\",\n        \"id\": \"3\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-get-driver-by-property/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-get-driver-by-property/#related-information","title":"Related information","text":"<ul> <li>Tutorial: Retrieve a driver's cell phone number</li> <li>Security</li> </ul>"},{"location":"reference/2-operations/drivers-update-driver-by-id/","title":"Update a specific driver","text":"<p>Updates a <code>drivers</code> object in the database.</p> <p>For example, you want to update properties associated with driverId=4 in the database.</p> <p>Assumption: to update the correct driver, you must know the <code>driverId</code> to query.</p> <p>The request body contains the updated driver's details.</p>"},{"location":"reference/2-operations/drivers-update-driver-by-id/#url","title":"URL","text":"<pre><code>{server_url}/drivers/{id}\n</code></pre>"},{"location":"reference/2-operations/drivers-update-driver-by-id/#method","title":"Method","text":"<p>{PUT}</p>"},{"location":"reference/2-operations/drivers-update-driver-by-id/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>driverId</code> The record ID of the driver to return. number Required"},{"location":"reference/2-operations/drivers-update-driver-by-id/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section. Content-Type The format of the data to be posted. Optional application/json. Default value. Accept The format of the data to be returned. Optional application/json. Default value."},{"location":"reference/2-operations/drivers-update-driver-by-id/#request-body","title":"Request body","text":"<p>In the request body, specify a JSON representation of the <code>drivers</code> object.</p> <p>IMPORTANT: With a {PUT} call, the request body replaces the current properties of the <code>drivers</code> object.</p> <p>To update/replace single property instances in the <code>drivers</code> object, use a {PATCH} call in your drivers request.</p> <p>The following table lists the properties that you can update.</p> Property Description Type Required Notes <code>driverName</code> The driver's full name. string Required <code>driverIdentity</code> The driver's primary role in relationship to the family. string Optional Examples: Mom, Dad, Neighbor. <code>cellPhone</code> The driver's cell phone number. string Required The standard US telephone number is a 10-digit number, such as (555) 555-1234, where the first three digits are the 'area code'. <code>email</code> The driver's email address. string Required A unique email is required. <code>id</code> The driver's unique record ID. number Required The driver's id is auto-generated. See the return body."},{"location":"reference/2-operations/drivers-update-driver-by-id/#sample-request","title":"Sample request","text":"<p>The PUT body should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>[\n    {\n        \"driverName\": \"SallyAnn Issac\",\n        \"driverIdentity\": \"Gran\",\n        \"cellPhone\": \"(555)555-9674\",\n        \"email\": \"s.issac@gmail.com\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-update-driver-by-id/#return-body","title":"Return body","text":"<p>The following example shows the response. Note that the names should be the same as you used in your Request body and the response should include the driver's id. The driver's id is automatically generated when the driver object is created.</p> <pre><code>[\n    {\n        \"driverName\": \"SallyAnn Issac\",\n        \"driverIdentity\": \"Gran\",\n        \"cellPhone\": \"(555)555-9674\",\n        \"email\": \"s.issac@gmail.com\",\n        \"id\": \"4\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-update-driver-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Updated Driving schedule updated successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-update-driver-by-id/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/drivers-update-driver-by-property/","title":"Update a driver by property","text":"<p>Updates and replaces property instances in the <code>drivers</code> object.</p> <p>For example, you want to update a single property associated with driverId=4 in the database.</p> <p>Assumption: to update the correct driver, you must know the <code>driverId</code> to query.</p> <p>The request body contains the updated driver's details.</p>"},{"location":"reference/2-operations/drivers-update-driver-by-property/#url","title":"URL","text":"<pre><code>{server_url}/drivers/{id}\n</code></pre>"},{"location":"reference/2-operations/drivers-update-driver-by-property/#method","title":"Method","text":"<p>{PATCH}</p>"},{"location":"reference/2-operations/drivers-update-driver-by-property/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>driverId</code> The record ID of the driver to return. number Required"},{"location":"reference/2-operations/drivers-update-driver-by-property/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section. Content-Type The format of the data to be posted. Optional application/json. Default value. Accept The format of the data to be returned. Optional application/json. Default value."},{"location":"reference/2-operations/drivers-update-driver-by-property/#request-body","title":"Request body","text":"<p>In the request body, specify a JSON representation of the <code>drivers</code> object.</p> <p>IMPORTANT: With a {PATCH} call, the request body replaces specified properties of the <code>drivers</code> object.</p> <p>To update/replace all the properties in the <code>drivers</code> object, use a {PUT} call in your drivers request.</p> <p>The following table lists the properties that you can update.</p> Property Description Type Required Notes <code>driverName</code> The driver's full name. string Required <code>driverIdentity</code> The driver's primary role in relationship to the family. string Optional Examples: Mom, Dad, Neighbor. <code>cellPhone</code> The driver's cell phone number. string Required The standard US telephone number is a 10-digit number, such as (555) 555-1234, where the first three digits are the 'area code'. <code>email</code> The driver's email address. string Required A unique email is required. <code>id</code> The driver's unique record ID. number Required The driver's id is auto-generated. See the return body."},{"location":"reference/2-operations/drivers-update-driver-by-property/#sample-request","title":"Sample request","text":"<p>The PATCH body should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>[\n    {\n        \"driverIdentity\": \"Nana\",\n        \"cellPhone\": \"(555)555-9874\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-update-driver-by-property/#return-body","title":"Return body","text":"<p>The following example shows the response. Note that the names should be the same as you used in your Request body and the response should include the driver's id. The driver's id is automatically generated when the schedule is created.</p> <pre><code>[\n    {\n        \"driverName\": \"SallyAnn Issac\",\n        \"driverIdentity\": \"Nana\",\n        \"cellPhone\": \"(555)555-9874\",\n        \"email\": \"s.issac@gmail.com\",\n        \"id\": \"4\"\n}\n]\n</code></pre>"},{"location":"reference/2-operations/drivers-update-driver-by-property/#return-status","title":"Return status","text":"Status value Return status Description 200 Updated Driving schedule updated successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/drivers-update-driver-by-property/#related-information","title":"Related information","text":"<ul> <li>Tutorial: Change the status (property) of a driver's schedule</li> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-create-schedule/","title":"Create a schedule","text":"<p>Creates a driver's pick-up and drop-off <code>schedules</code>. The request body contains the new schedule details. You must specify the required properties for the schedule.</p>"},{"location":"reference/2-operations/schedules-create-schedule/#url","title":"URL","text":"<pre><code>{server_url}/schedules/\n</code></pre>"},{"location":"reference/2-operations/schedules-create-schedule/#method","title":"Method","text":"<p>{POST}</p>"},{"location":"reference/2-operations/schedules-create-schedule/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section. Content-Type The format of the data to be posted. Optional application/json. Default value. Accept The format of the data to be returned. Optional application/json. Default value."},{"location":"reference/2-operations/schedules-create-schedule/#request-body","title":"Request body","text":"<p>In the request body, specify a JSON representation of the <code>schedules</code> object. The following table lists the properties that are required when you create a schedule.</p> Property Description Type Required Notes <code>driverId</code> The ID of the driver resource to which this schedule is assigned. number Required <code>title</code> The title or short description of the driving schedule. number Required Example: Vet visit, School run. <code>passenger</code> Who the driver is to transport. string Required <code>pickupLocation</code> Where the driver is to pick up a passenger. string Required <code>dropoffLocation</code> Where the driver is to drop off a passenger. string Required <code>pickupTime</code> When the driver is to pick up a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>dropoffTime</code> When the driver is to drop off a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>status</code> The status of the driving schedule. string Required Allowed status values are Scheduled, Canceled, Rescheduled. <code>id</code> The driving schedule's unique record ID. number Required The schedule id is auto-generated. See the return body."},{"location":"reference/2-operations/schedules-create-schedule/#sample-request","title":"Sample request","text":"<p>The POST body should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>[\n     {\n        \"driverID\": \"5\",\n        \"title\": \"Cinema night\",\n        \"passenger\": \"Johnny &amp; Molly\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"Omniplex, 112 Baker St, Springfield\",\n        \"pickupTime\": \"2024-07-09T19:30:00Z\",\n        \"dropoffTime\": \"2024-07-09T23:00:00Z\",\n        \"status\": \"Scheduled\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-create-schedule/#return-body","title":"Return body","text":"<p>The following example shows the response. Note that the names should be the same as you used in your Request body and the response should include the new schedule id. The schedule id is automatically generated when the schedule is created.</p> <pre><code>[\n    {\n        \"id\": \"6\",\n        \"driverID\": \"5\",\n        \"title\": \"Cinema night\",\n        \"passenger\": \"Johnny &amp; Molly\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"Omniplex, 112 Baker St, Springfield\",\n        \"pickupTime\": \"2024-07-09T19:30:00Z\",\n        \"dropoffTime\": \"2024-07-09T23:00:00Z\",\n        \"status\": \"Scheduled\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-create-schedule/#return-status","title":"Return status","text":"Status value Return status Description 201 Created Driving schedule created successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-create-schedule/#related-information","title":"Related information","text":"<ul> <li>Tutorial: Create a driver's schedule</li> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/","title":"Delete a schedule for a specific driver","text":"<p>Deletes a <code>schedules</code> object in the database.</p> <p>For example, you want to delete schedule Id=6 from the database.</p> <p>Assumption: to delete the correct schedule, you must know the <code>Id</code> to query.</p>"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#url","title":"URL","text":"<pre><code>{server_url}/schedules/{id}\n</code></pre>"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#method","title":"Method","text":"<p>{DELETE}</p>"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>Id</code> The record ID of the schedule to return. number Required"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#return-body","title":"Return body","text":"<p>The sample response returns a schedule matching the specified <code>id</code>, and deletes the object in the database.</p> <pre><code>[\n   {\n        \"id\": \"6\",\n        \"driverID\": \"5\",\n        \"title\": \"Birthday party celebration\",\n        \"passenger\": \"Johnny &amp; Molly, Frankie and Jill\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"Omniplex, 112 Baker St, Springfield\",\n        \"pickupTime\": \"2024-07-09T19:30:00Z\",\n        \"dropoffTime\": \"2024-07-09T23:00:00Z\",\n        \"status\": \"Unscheduled\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-delete-schedule-by-id/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-get-all-schedules/","title":"Retrieve all schedules","text":"<p>Returns an array of <code>schedules</code> objects for all <code>drivers</code> who are registered with the service.</p>"},{"location":"reference/2-operations/schedules-get-all-schedules/#url","title":"URL","text":"<pre><code>{server_url}/schedules/\n</code></pre>"},{"location":"reference/2-operations/schedules-get-all-schedules/#method","title":"Method","text":"<p>{GET}</p>"},{"location":"reference/2-operations/schedules-get-all-schedules/#query-parameters","title":"Query Parameters","text":"<p>None</p>"},{"location":"reference/2-operations/schedules-get-all-schedules/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/schedules-get-all-schedules/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/schedules-get-all-schedules/#return-body","title":"Return body","text":"<pre><code>[\n    {\n        \"driverId\": \"1\",\n        \"title\": \"School run\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"789 Oak St, Anytown\",\n        \"dropoffLocation\": \"321 Maple St, Anytown\",\n        \"pickupTime\": \"2024-06-16T09:00:00Z\",\n        \"dropoffTime\": \"2024-06-16T09:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"2\"\n    },\n    {\n        \"driverId\": \"2\",\n        \"title\": \"Baseball practice\",\n        \"passenger\": \"Richie\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"456 Elm St, Springfield\",\n        \"pickupTime\": \"2024-06-15T08:00:00Z\",\n        \"dropoffTime\": \"2024-06-15T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"1\"\n    },\n    {\n        \"driverId\": \"3\",\n        \"title\": \"Swimfest\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"110 Nassau St, Springfield\",\n        \"pickupTime\": \"2024-07-22T08:00:00Z\",\n        \"dropoffTime\": \"2024-07-22T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"3\"\n    },\n    {\n        \"driverId\": \"1\",\n        \"title\": \"Vet visit\",\n        \"passenger\": \"Minnie\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"12 Animal Drive, Springfield\",\n        \"pickupTime\": \"2024-08-08T08:00:00Z\",\n        \"dropoffTime\": \"2024-08-08T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"4\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-get-all-schedules/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-get-all-schedules/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/","title":"Retrieve schedules for a specific driver","text":"<p>Returns an array of <code>schedules</code> objects for a specified <code>driverId</code>, if it exists.</p> <p>For example, you want to retrieve the driving schedule of driverId=1 from the database.</p> <p>Assumption: to return the correct driver's pick-up and drop-off schedule, you must know the <code>driverId</code> to query.</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/#url","title":"URL","text":"<pre><code>{server_url}/schedules/{driverId}\n</code></pre>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/#method","title":"Method","text":"<p>{GET}</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>driverId</code> The record ID of the driver to return. number Required <p>NOTE: To retrieve a driver's schedule by title or other property, further filter your schedules request.</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/schedules-get-schedule-by-id/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/#return-body","title":"Return body","text":"<pre><code>[\n   {\n        \"driverId\": \"1\",\n        \"title\": \"School run\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"789 Oak St, Anytown\",\n        \"dropoffLocation\": \"321 Maple St, Anytown\",\n        \"pickupTime\": \"2024-06-16T09:00:00Z\",\n        \"dropoffTime\": \"2024-06-16T09:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"2\"\n    },\n    {\n        \"driverId\": \"1\",\n        \"title\": \"Vet visit\",\n        \"passenger\": \"Minnie\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"12 Animal Drive, Springfield\",\n        \"pickupTime\": \"2024-08-08T08:00:00Z\",\n        \"dropoffTime\": \"2024-08-08T08:30:00Z\",\n        \"status\": \"Scheduled\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-get-schedule-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-get-schedule-by-id/#related-information","title":"Related information","text":"<ul> <li>Tutorial: Retrieve a driver's schedule</li> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/","title":"Retrieve schedules by property","text":"<p>Returns an array of driving <code>schedules</code> objects for specified query parameters.</p> <p>For example, to return drivers who are scheduled to drive Molly, query the property <code>passenger</code> to filter responses.</p> <p>Assumption: to return the correct schedule, you must know the property to query.</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/#url","title":"URL","text":"<pre><code>{server_url}/schedules/?{property}={value}\n</code></pre>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/#method","title":"Method","text":"<p>{GET}</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/#query-parameters","title":"Query parameters","text":"<p>Optionally, you can specify schedule properties as<code>Key/Value</code> query parameters. For example: <code>title/School run</code>. Note that property titles are case sensitive.</p> Property Description Type Required Notes <code>title</code> The title or short description of the driving schedule. number Optional Example: Vet visit, School run. <code>passenger</code> Who the driver is to transport. string Optional <code>pickupLocation</code> Where the driver is to pick up a passenger. string Optional <code>dropoffLocation</code> Where the driver is to drop off a passenger. string Optional <code>status</code> The status of the driving schedule. string Optional Allowed status values are Scheduled, Canceled, Rescheduled."},{"location":"reference/2-operations/schedules-get-schedule-by-property/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section."},{"location":"reference/2-operations/schedules-get-schedule-by-property/#request-body","title":"Request body","text":"<p>None</p>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/#sample-request","title":"Sample request","text":"<p>The API call should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>{base_url}/schedules?passenger=Molly\n</code></pre>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/#return-body","title":"Return body","text":"<p>The sample response returns drivers' schedules matching the specified <code>passenger</code>.</p> <pre><code>[\n    {\n        \"driverId\": \"1\",\n        \"title\": \"School run\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"789 Oak St, Anytown\",\n        \"dropoffLocation\": \"321 Maple St, Anytown\",\n        \"pickupTime\": \"2024-06-16T09:00:00Z\",\n        \"dropoffTime\": \"2024-06-16T09:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"2\"\n    },\n    {\n        \"driverId\": \"3\",\n        \"title\": \"Swimfest\",\n        \"passenger\": \"Molly\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"110 Nassau St, Springfield\",\n        \"pickupTime\": \"2024-07-22T08:00:00Z\",\n        \"dropoffTime\": \"2024-07-22T08:30:00Z\",\n        \"status\": \"Scheduled\",\n        \"id\": \"3\"\n    }\n    ...\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-get-schedule-by-property/#return-status","title":"Return status","text":"Status value Return status Description 200 Success Requested data returned successfully ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-get-schedule-by-property/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-update-schedule-by-id/","title":"Update a schedule for a specific driver","text":"<p>Updates a driver's <code>schedules</code> object in the database.</p> <p>For example, you want to update properties associated with schedule id=6 in the database.</p> <p>Assumption: to update the correct schedule, you must know the schedule <code>Id</code> to query.</p> <p>The request body contains the updated schedule details.</p>"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#url","title":"URL","text":"<pre><code>{server_url}/schedules/{id}\n</code></pre>"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#method","title":"Method","text":"<p>{PUT}</p>"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>Id</code> The record ID of the schedule to return. number Required"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section. Content-Type The format of the data to be posted. Optional application/json. Default value. Accept The format of the data to be returned. Optional application/json. Default value."},{"location":"reference/2-operations/schedules-update-schedule-by-id/#request-body","title":"Request body","text":"<p>In the request body, specify a JSON representation of the <code>schedules</code> object. The following table lists the properties that are required when you create a schedule.</p> <p>IMPORTANT: With a {PUT} call, the request body replaces the current properties of the <code>schedules</code> object.</p> <p>To update/replace single property instances in the <code>schedules</code> object, use a {PATCH} call in your schedules request.</p> Property Description Type Required Notes <code>driverID</code> The ID of the driver resource to which this schedule is assigned. number Required <code>passenger</code> Who the driver is to transport. string Required <code>pickupLocation</code> Where the driver is to collect a passenger. string Required <code>dropoffLocation</code> Where the driver is to drop off a passenger. string Required <code>pickupTime</code> When the driver is to collect a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>dropoffTime</code> When the driver is to drop off a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>status</code> The status of the driving schedule. string Required Allowed status values are Scheduled, Canceled, Rescheduled. <code>id</code> The driving schedule's unique record ID. number Required"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#sample-request","title":"Sample request","text":"<p>The PUT body should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>[\n      {\n        \"id\": \"6\",\n        \"driverID\": \"5\",\n        \"title\": \"'Birthday party\",\n        \"passenger\": \"Johnny &amp; Molly, Frankie &amp; Jill\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"Omniplex, 112 Baker St, Springfield\",\n        \"pickupTime\": \"2024-07-09T19:30:00Z\",\n        \"dropoffTime\": \"2024-07-09T23:00:00Z\",\n        \"status\": \"Unscheduled\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#return-body","title":"Return body","text":"<p>The following example shows the response. Note that the names should be the same as you used in your Request body and the response should include the schedule id. The schedule id is automatically generated when the schedule is created.</p> <pre><code>[\n    {\n        \"id\": \"6\",\n        \"driverID\": \"5\",\n        \"title\": \"Birthday party\",\n        \"passenger\": \"Johnny &amp; Molly, Frankie and Jill\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"Omniplex, 112 Baker St, Springfield\",\n        \"pickupTime\": \"2024-07-09T19:30:00Z\",\n        \"dropoffTime\": \"2024-07-09T23:00:00Z\",\n        \"status\": \"Unscheduled\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-update-schedule-by-id/#return-status","title":"Return status","text":"Status value Return status Description 200 Updated Driving schedule updated successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-update-schedule-by-id/#related-information","title":"Related information","text":"<ul> <li>Security</li> </ul>"},{"location":"reference/2-operations/schedules-update-schedule-by-property/","title":"Update a schedule by property","text":"<p>Updates and replaces property instances in the <code>schedules</code> object.</p> <p>For example, you want to update properties of schedule id=6 in the database. Assumption: to update the correct schedule, you must know the schedule <code>Id</code> to query.</p> <p>The request body contains the updated schedule details.</p>"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#url","title":"URL","text":"<pre><code>{server_url}/schedules/{id}\n</code></pre>"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#method","title":"Method","text":"<p>{PATCH}</p>"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#query-parameters","title":"Query parameters","text":"Property Description Type Required Notes <code>Id</code> The record ID of the schedule to return. number Required"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#request-headers","title":"Request headers","text":"Header name Description Required Values Basic Auth A security checkpoint that requires transmission of a username and password with every request. Required Basic authentication is a simple authentication scheme that's built into the HTTP protocol. See the Quickstart &gt; Security section. Content-Type The format of the data to be posted. Optional application/json. Default value. Accept The format of the data to be returned. Optional application/json. Default value."},{"location":"reference/2-operations/schedules-update-schedule-by-property/#request-body","title":"Request body","text":"<p>In the request body, specify a JSON representation of the <code>schedules</code> object.</p> <p>IMPORTANT: With a {PATCH} call, the request body replaces specified properties of the <code>schedules</code> object.</p> <p>To update/replace all the properties in the <code>schedules</code> object, use a {PUT} call in your schedules request.</p> <p>The following table lists the properties that you can update.</p> Property Description Type Required Notes <code>driverID</code> The ID of the driver resource to which this schedule is assigned. number Required <code>passenger</code> Who the driver is to transport. string Required <code>pickupLocation</code> Where the driver is to collect a passenger. string Required <code>dropoffLocation</code> Where the driver is to drop off a passenger. string Required <code>pickupTime</code> When the driver is to collect a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>dropoffTime</code> When the driver is to drop off a passenger. string Required The ISO 8601 format of the date and time: YYYY-MM-DDTHH:MM:SS <code>status</code> The status of the driving schedule. string Required Allowed status values are Scheduled, Canceled, Rescheduled. <code>id</code> The driving schedule's unique record ID. number Required"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#sample-request","title":"Sample request","text":"<p>The PATCH body should look something like this. You can change the values of each property as you\u2019d like.</p> <pre><code>[\n    {\n        \"title\": \"Birthday party celebration\"\n        \"status\": \"Unscheduled\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#return-body","title":"Return body","text":"<p>The following example shows the response. Note that the names should be the same as you used in your Request body and the response should include the schedule id. The schedule id is automatically generated when the schedule is created.</p> <pre><code>[\n    {\n         \"id\": \"0f50\",\n        \"driverID\": \"5\",\n        \"title\": \"Birthday party celebration\",\n        \"passenger\": \"Johnny &amp; Molly, Frankie and Jill\",\n        \"pickupLocation\": \"123 Main St, Springfield\",\n        \"dropoffLocation\": \"Omniplex, 112 Baker St, Springfield\",\n        \"pickupTime\": \"2024-07-09T19:30:00Z\",\n        \"dropoffTime\": \"2024-07-09T23:00:00Z\",\n        \"status\": \"Unscheduled\"\n    }\n]\n</code></pre>"},{"location":"reference/2-operations/schedules-update-schedule-by-property/#return-status","title":"Return status","text":"Status value Return status Description 200 Updated Driving schedule updated successfully. 500 Internal server Error Invalid JSON. ECONNREFUSED N/A Service is offline. Start the service and try again."},{"location":"reference/2-operations/schedules-update-schedule-by-property/#related-information","title":"Related information","text":"<ul> <li>Tutorial: Change the status (property) of a driver's schedule</li> <li>Security</li> </ul>"},{"location":"reference/3-supported-endpoints/supported-endpoints/","title":"Supported endpoints","text":"HTTP Method Endpoint GET Retrieve all drivers GET Retrieve a specific driver by ID GET Retrieve a driver by property POST Create a driver object PUT Update a driver by ID PATCH Update a driver by property DELETE Delete a driver by ID GET Retrieve all driving schedules GET Retrieve a specific schedule by ID GET Retrieve a schedule by property POST Create a schedule PUT Update a schedule by ID PATCH Update a schedule by property DELETE Delete a schedule by ID"},{"location":"reference/4-error-handling/error-handling/","title":"Handling Errors","text":"<p>The Chauffeur Tracker service API follows standard HTTP status codes to indicate the success or failure of an API call. Here is an overview of common HTTP status codes and their meanings, along with typical reasons for each code.</p> <p>Operations that execute successfully will return <code>2xx</code> codes. Operations that result in an error due to a problem on the client's side, such as invalid input, will return standard <code>4xx</code> codes. Operations that result in an error due to a problem with the server will return <code>5xx</code> codes.</p>"},{"location":"reference/4-error-handling/error-handling/#http-status-code-summary","title":"HTTP Status Code Summary","text":"<p>This section summarizes the most frequent HTTP status codes returned by the API and describes their common causes.</p> HTTP Status Code Status Text Description Common Causes 200 OK The request succeeded. The exact result depends on the HTTP method used. With <code>GET</code>, the requested resource is returned. With <code>POST</code>, a new resource is created or updated. N/A 400 Bad Request The request was unacceptable, often due to missing a required parameter or malformed request body. Missing required parameters, malformed JSON, or invalid data formats. 404 Not Found The requested resource does not exist. Incorrect endpoint URL, attempting to access non-existent resources, or typo in the request. 405 Method Not Allowed The HTTP method used is not supported by the endpoint. Using an inappropriate HTTP method, like sending <code>GET</code> instead of <code>POST</code>, or trying to delete where only updates are allowed. 500 Internal Server Error The server encountered an unexpected condition that prevented it from fulfilling the request. A generic server-side issue, such as a crash, unhandled exceptions, or resource constraints. 503 Service Unavailable The server cannot handle the request. Server is temporary overloaded or insufficient resources to process the request. No Status code ECONNREFUSED The service refused the connection. The service is offline, or you're connecting to the wrong port or hostname. Check if the service is running and try again with the correct port/hostname. <p>In any other case, refer to our Support options.</p>"},{"location":"tutorials/0-all-tutorials-list/","title":"Dive into our tutorials","text":"<ul> <li>Enroll a new driver</li> <li>Create a driver's schedule</li> <li>Retrieve a driver's schedule</li> <li>Change the status (property) of a driver's schedule</li> <li>Retrieve a driver's cell phone number</li> </ul>"},{"location":"tutorials/1-how-to-enroll-a-driver/","title":"Enroll a new driver","text":"<p>Let's suppose that SallyAnn (Nana) wants to add herself to the family's driving rota to ease their load.</p> <p>In this tutorial, you will learn how to enroll a new driver in the service.</p> <p>Expect this tutorial to take about 15 minutes to complete.</p>"},{"location":"tutorials/1-how-to-enroll-a-driver/#before-you-start","title":"Before you start","text":"<p>Before you start this tutorial:</p> <ul> <li>Complete all the prerequisites on the development system you'll use for the tutorial.</li> <li>Open the Postman app, which you'll use to test your API calls.</li> </ul>"},{"location":"tutorials/1-how-to-enroll-a-driver/#enroll-a-new-driver_1","title":"Enroll a new driver","text":"<p>To enroll a new driver, make a <code>POST</code> call to the <code>drivers</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these request values in the right-frame window:</p> UI Element Values Required Notes METHOD POST Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/drivers</code> Required Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. </li> <li> <p>In the request body, POST a JSON representation of SallyAnn's <code>drivers</code> object like this. You can change the values of each property as you\u2019d like.</p> <pre><code>    [\n        {\n            \"driverName\": \"SallyAnn Issac\",\n            \"driverIdentity\": \"Nana\",\n            \"cellPhone\": \"(555)555-9874\",\n            \"email\": \"s.issac# Tutor@gmail.com\"\n        }\n    ]\n</code></pre> </li> <li> <p>Click Send to make the request.</p> </li> <li>Review the response body. The driver's id is automatically generated when the driver object is created.</li> </ol> <pre><code>    [\n        {\n            \"driverName\": \"SallyAnn Issac\",\n            \"driverIdentity\": \"Nana\",\n            \"cellPhone\": \"(555)555-9874\",\n            \"email\": \"s.issac@gmail.com\"\n            \"id\": \"00ad\"\n        }\n    ]\n</code></pre>"},{"location":"tutorials/1-how-to-enroll-a-driver/#related-information","title":"Related information","text":"<ul> <li>Endpoint: Create a driver object</li> </ul>"},{"location":"tutorials/2-how-to-create-a-driver-schedule/","title":"Create a driver's schedule","text":"<p>Let's suppose that you've enrolled SallyAnn (Nana) in the service, and you want to create a driving schedule for her. She's offered to drive her grandson, Johnny, to and from a dental appointment.</p> <p>In this tutorial, you will learn how to create a pick-up and drop-off schedule for a driver in the service.</p> <p>Expect this tutorial to take about 15 minutes to complete.</p>"},{"location":"tutorials/2-how-to-create-a-driver-schedule/#before-you-start","title":"Before you start","text":"<p>Before you start this tutorial:</p> <ul> <li>Complete all the prerequisites on the development system you'll use for the tutorial.</li> <li>Open the Postman app, which you'll use to test your API calls.</li> </ul>"},{"location":"tutorials/2-how-to-create-a-driver-schedule/#about-this-task","title":"About this task","text":"<p>There's two parts to this task.</p> <ol> <li>Identify the driver's ID \u2014 unless you already know the driver's unique ID, you must first retrieve it from the list of available drivers. If you already know the driver\u2019s ID, skip this step.</li> <li>Create a driving schedule to associate with the returned/known driver's ID.</li> </ol>"},{"location":"tutorials/2-how-to-create-a-driver-schedule/#identify-a-drivers-id","title":"Identify a driver's ID","text":"<p>To view all drivers, make a <code>GET</code> call to the <code>drivers</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these request values in the right-frame window:</p> UI Element Values Required Notes METHOD GET Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/drivers</code> Required All drivers are returned unless you specify query parameters (see params) to return a specific driver. params <code>Key/Value</code> Optional You can specify driver attributes as key/value query parameters. For example: driverIdentity/Nana. Note that key/value titles are case sensitive. Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. Request body None </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body and verify the driver's id, which is automatically generated when the driver object is created. The response should look something like this.</p> <pre><code>    [\n        {\n            \"driverName\": \"SallyAnn Issac\",\n            \"driverIdentity\": \"Nana\",\n            \"cellPhone\": \"(555)555-9874\",\n            \"email\": \"s.issac@gmail.com\"\n            \"id\": \"00ad\"\n        }\n    ]   \n</code></pre> </li> </ol>"},{"location":"tutorials/2-how-to-create-a-driver-schedule/#create-a-schedule-for-an-identified-driver","title":"Create a schedule for an identified driver","text":"<p>Assuming that you know Nana's driver's {id}, proceed to create a driving schedule for her. Make a <code>POST</code> call to the <code>schedules</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these values in the right-frame window:</p> UI Element Values Required Notes METHOD POST Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/schedules</code> Required Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. </li> <li> <p>In the request body, POST a JSON representation of Nana's <code>schedules</code> object like this. The driverId is the id you identified in your previous <code>GET</code> call to the <code>drivers</code> resource, if not already known. You can change the values of each property as you\u2019d like.</p> <pre><code>    [\n        {\n            \"driverId\": \"00ad\",\n            \"title\": \"Johnny's Dental visit\",\n            \"passenger\": \"Johnny\",\n            \"pickupLocation\": \"123 Main St, Springfield\",\n            \"dropoffLocation\": \"The Quay, Docks, Springfield\",\n            \"pickupTime\": \"2024-06-14T11:00:00Z\",\n            \"dropoffTime\": \"2024-07-14T12:00:00Z\",\n            \"status\": \"Scheduled\"\n        }\n    ]\n</code></pre> </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body and verify that the driver's schedule includes a newly generated id. A 200 OK status code indicates success.</p> <pre><code>    [\n        {\n            \"id\": \"e3a8\",\n            \"driverID\": \"00ad\",\n            \"title\": \"Johnny's Dental visit\",\n            \"passenger\": \"Johnny\",\n            \"pickupLocation\": \"123 Main St, Springfield\",\n            \"dropoffLocation\": \"The Quay, Docks, Springfield\",\n            \"pickupTime\": \"2024-06-16T11:00:00Z\",\n            \"dropoffTime\": \"2024-07-16T12:00:00Z\",\n            \"status\": \"Scheduled\"\n        }\n    ]  \n</code></pre> </li> </ol>"},{"location":"tutorials/2-how-to-create-a-driver-schedule/#related-information","title":"Related information","text":"<ul> <li>Endpoint: Create a schedule</li> </ul>"},{"location":"tutorials/3-how-to-get-a-drivers-schedule/","title":"Retrieve a driver's schedule","text":"<p>Let's suppose that Mom, Laura, wants a list of her scheduled driving commitments.</p> <p>In this tutorial, you will learn how to retrieve schedules with a requested status for a specific driver in the service.</p> <p>Expect this tutorial to take about 15 minutes to complete.</p>"},{"location":"tutorials/3-how-to-get-a-drivers-schedule/#before-you-start","title":"Before you start","text":"<ul> <li>Complete all the prerequisites on the development system you'll use for the tutorial.</li> <li>Open the Postman app, which you'll use to test your API calls.</li> </ul>"},{"location":"tutorials/3-how-to-get-a-drivers-schedule/#about-this-task","title":"About this task","text":"<p>There's two parts to this task.</p> <ol> <li>Identify the driver's ID \u2014 unless you already know the driver's unique ID, you must first retrieve it from the list of available drivers. If you already know the driver\u2019s ID, skip this step.</li> <li>Retrieve the scheduled driving commitments associated with the returned/known driver's ID.</li> </ol>"},{"location":"tutorials/3-how-to-get-a-drivers-schedule/#identify-a-drivers-id","title":"Identify a driver's ID","text":"<p>To view all drivers, make a <code>GET</code> call to the <code>drivers</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these request values in the right-frame window:</p> UI Element Values Required Notes METHOD GET Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/drivers</code> Required All drivers are returned unless you specify query parameters (see params) to return a specific driver. params <code>Key/Value</code> Optional You can specify driver attributes as key/value query parameters. For example: driverIdentity/Mom. Note that key/value titles are case sensitive. Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. Request body None </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body and verify the driver's id, which should look something like this.</p> <pre><code>    [\n        {\n            \"driverName\": \"Laura Jaxon\",\n            \"driverIdentity\": \"Mom\",\n            \"cellPhone\": \"(555)555-1234\",\n            \"email\": \"l.jaxon@gmail.com\",\n            \"id\": \"1\"\n        }\n    ]\n</code></pre> </li> </ol>"},{"location":"tutorials/3-how-to-get-a-drivers-schedule/#retrieve-the-drivers-scheduled-driving-commitments","title":"Retrieve the driver's scheduled driving commitments","text":"<p>Assuming that you know the driver's {id}, proceed to retrieve their scheduled driving commitments. Make a <code>GET</code> call to the <code>schedules</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these values in the right-frame window:</p> UI Element Values Required Notes METHOD GET Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/schedules</code> Required All schedules are returned unless you specify query parameters (see params) to return a specific schedule. Params <code>Key/Value</code> Required Specify these key/value query parameters:  * driverId/{id} of the selected driver returned in your <code>GET</code> call, and   * status/Scheduled  Note that key/value titles are case sensitive. Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. Request body None </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body and verify the driver's schedules, which should look something like this. A 200 OK status code indicates success.</p> <pre><code>    [\n        {\n            \"driverId\": \"1\",\n            \"title\": \"School run\",\n            \"passenger\": \"Molly\",\n            \"pickupLocation\": \"789 Oak St, Anytown\",\n            \"dropoffLocation\": \"321 Maple St, Anytown\",\n            \"pickupTime\": \"2024-06-16T09:00:00Z\",\n            \"dropoffTime\": \"2024-06-16T09:30:00Z\",\n            \"status\": \"Scheduled\",\n            \"id\": \"2\"\n        },\n        {\n            \"driverId\": \"1\",\n            \"title\": \"Vet visit\",\n            \"passenger\": \"Minnie\",\n            \"pickupLocation\": \"123 Main St, Springfield\",\n            \"dropoffLocation\": \"12 Animal Drive, Springfield\",\n            \"pickupTime\": \"2024-08-08T08:00:00Z\",\n            \"dropoffTime\": \"2024-08-08T08:30:00Z\",\n            \"status\": \"Scheduled\",\n            \"id\": \"4\"\n        }\n    ]\n</code></pre> </li> </ol>"},{"location":"tutorials/3-how-to-get-a-drivers-schedule/#related-information","title":"Related information","text":"<ul> <li>Endpoint: Retrieve schedules for a specific driver</li> </ul>"},{"location":"tutorials/4-how-to-change-a-driver-schedule-property/","title":"Change the status (property) of a driver's schedule","text":"<p>Let's suppose that Johnny's dental appointment has been canceled. You want to update SallyAnn's driving schedule to reflect the changed status for this appointment.</p> <p>In this tutorial, you will learn how to update a single property in a driver's schedule.</p> <p>Expect this tutorial to take about 15 minutes to complete.</p>"},{"location":"tutorials/4-how-to-change-a-driver-schedule-property/#before-you-start","title":"Before you start","text":"<ul> <li>Complete all the prerequisites on the development system you'll use for the tutorial.</li> <li>Open the Postman app, which you'll use to test your API calls.</li> </ul>"},{"location":"tutorials/4-how-to-change-a-driver-schedule-property/#about-this-task","title":"About this task","text":"<p>There's two parts to this task.</p> <ol> <li>Identify the schedule's ID \u2014 unless you already know the driving schedule's unique ID, you must first retrieve it from the list of available schedules. If you already know the schedule\u2019s ID, skip this step.</li> <li>Update the status property in returned/known schedule. You'll used a PATCH request to make the call.</li> </ol>"},{"location":"tutorials/4-how-to-change-a-driver-schedule-property/#identify-a-driving-schedules-id","title":"Identify a driving schedule's ID","text":"<p>To view all drivers, make a <code>GET</code> call to the <code>drivers</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these request values in the right-frame window:</p> UI Element Values Required Notes METHOD GET Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/schedules</code> Required All schedules are returned unless you specify query parameters (see params) to return a specific schedule. params <code>Key/Value</code> Optional You can specify schedule attributes as key/value query parameters. For example: passenger/Johnny. Note that key/value titles are case sensitive. Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. Request body None </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body and verify the schedule id, which is automatically generated when the schedule object is created. The response should look something like this.</p> <pre><code>    [\n        {\n            \"id\": \"e3a8\",\n            \"driverID\": \"00ad\",\n            \"title\": \"Johnny's Dental visit\",\n            \"passenger\": \"Johnny\",\n            \"pickupLocation\": \"123 Main St, Springfield\",\n            \"dropoffLocation\": \"The Quay, Docks, Springfield\",\n            \"pickupTime\": \"2024-06-16T11:00:00Z\",\n            \"dropoffTime\": \"2024-07-16T12:00:00Z\",\n            \"status\": \"Unscheduled\"\n}\n    ]   \n</code></pre> </li> </ol>"},{"location":"tutorials/4-how-to-change-a-driver-schedule-property/#update-a-property-in-the-identified-drivers-schedule","title":"Update a property in the identified driver's schedule","text":"<p>Assuming that you know the schedule {id}, proceed to update the driving schedule property (status). Make a <code>PATCH</code> call to the <code>schedules</code> resource.</p> <ol> <li>To create a new request in Postman, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these values in the right-frame window:</p> UI Element Values Required Notes METHOD PATCH Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/schedules/{id}</code> Required Specify the {id} of the selected schedule returned in your <code>GET</code> call. Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. </li> <li> <p>In the request body, POST a JSON representation of Nana's <code>schedules</code> object like this. You can change the values of each property as you\u2019d like.</p> <pre><code>    [\n        {\n            \"status\": \"Canceled\"\n        }\n    ]\n</code></pre> </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body and verify the driver's schedules, which should look something like this. A 200 OK status code indicates success.</p> <pre><code>    [\n        {\n            \"id\": \"e3a8\",\n            \"driverID\": \"00ad\",\n            \"title\": \"Johnny's Dental visit\",\n            \"passenger\": \"Johnny\",\n            \"pickupLocation\": \"123 Main St, Springfield\",\n            \"dropoffLocation\": \"The Quay, Docks, Springfield\",\n            \"pickupTime\": \"2024-06-16T11:00:00Z\",\n            \"dropoffTime\": \"2024-07-16T12:00:00Z\",\n            \"status\": \"Canceled\"\n        }\n    ]  \n</code></pre> </li> </ol>"},{"location":"tutorials/4-how-to-change-a-driver-schedule-property/#related-information","title":"Related information","text":"<ul> <li>Endpoint: Update a schedule by property</li> </ul>"},{"location":"tutorials/5-how-to-get-a-driver-by-property/","title":"Retrieve a driver's cell phone number","text":"<p>Let's suppose that Mom, Laura, is late for a pick-up and her passenger, Molly, needs her cell phone number to check in with her.</p> <p>In this tutorial, you will learn how to retrieve a driver in the service by a property query.</p> <p>Expect this tutorial to take about 15 minutes to complete.</p>"},{"location":"tutorials/5-how-to-get-a-driver-by-property/#before-you-start","title":"Before you start","text":"<p>Before you start this tutorial:</p> <ul> <li>Complete all the prerequisites on the development system you'll use for the tutorial.</li> <li>Open the Postman app, which you'll use to test your API calls.</li> </ul>"},{"location":"tutorials/5-how-to-get-a-driver-by-property/#retrieve-a-driver","title":"Retrieve a driver","text":"<p>To view a driver in the service, make a <code>GET</code> call to the <code>drivers</code> resource. Add a query parameter, <code>driverIdentity/Mom</code> to filter responses.</p> <ol> <li>On your desktop, open the Postman app.</li> <li>To create a new request, click New &gt; HTTP. Give the request a title.</li> <li> <p>Specify these request values in the right-frame window:</p> UI Element Values Required Notes METHOD GET Required Locate the drop-down menu next to the URL field. URL <code>{server_url}/drivers</code> Required All drivers are returned unless you specify query parameters (see params) to return a specific driver. params <code>Key/Value</code> Optional For the key/value pair, enter driverIdentity/Mom. Note that key/value titles are case sensitive. Headers <code>Content-Type</code> Optional The format of the data to be posted. Default value is application/json. Request body None </li> <li> <p>Click Send to make the request.</p> </li> <li> <p>Review the response body, which should look something like this. Verify the requested driver's cell phone number.</p> <pre><code>    [\n        {\n            \"driverName\": \"Laura Jaxon\",\n            \"driverIdentity\": \"Mom\",\n            \"cellPhone\": \"(555)555-1234\",\n            \"email\": \"f.smith@gmail.com\",\n            \"id\": \"1\"\n        }\n    ]\n</code></pre> </li> </ol>"},{"location":"tutorials/5-how-to-get-a-driver-by-property/#related-information","title":"Related information","text":"<ul> <li>Endpoint: Retrieve drivers by property</li> </ul>"}]}